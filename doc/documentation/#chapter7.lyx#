#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\options bibliography=totoc,listof=totoc,BCOR=5mm,DIV=12
\use_default_options false
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding iso8859-1
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine biblatex
\cite_engine_type authoryear
\biblio_style plainnat
\biblio_options backend=biber
\biblatex_bibstyle alphabetic
\biblatex_citestyle alphabetic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
chapter{Entwicklung des Clients}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap_development_client"

\end_inset


\end_layout

\begin_layout Standard
Dieses Kapitel befasst sich mit der Entwicklung des Clients und ist in den
 zwei Kapiteln Architektur und Implementierung gegliedert.
\end_layout

\begin_layout Section
Architekturentwurf
\end_layout

\begin_layout Standard
In Diesen Unterkapitel wird die Architektur des Clients beschrieben und
 visualisiert.
 Das Dashboard wird als Webapplikation auf Basis von HTML5, CSS und JavaScript
 entwickelt.
 Das Dashboard präsentiert Daten die vom Server über HTTP-Requests geholt
 werden.
\end_layout

\begin_layout Subsection
Komponentenorientierte Programmierung
\end_layout

\begin_layout Standard
Komponentenorientierte Programmierung, welche der objektorientierten Programmier
ung ähnelt, zeichnet sich dadurch aus, dass die Architektur sich aus vielen
 miteinander agierenden Komponenten zusammensetzt.
 Komponenten kapseln bestimmte Funktionen und werden durch eine Schnittstelle
 angesprochen.
 Komponenten können wiederverwendet werden und können unabhängig funktionieren.
 Die Motivation hinter dieser Architektur ist eine Ansammlung generativer
 Komponenten, die zur Steigerung der Produktivität und Qualität führen 
\begin_inset CommandInset citation
LatexCommand cite
key "P"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
React
\end_layout

\begin_layout Standard
Es wird die auf Babel basierende Bibliothek 
\emph on
React
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://reactjs.org/
\end_layout

\end_inset

 genutzt.
 Durch 
\emph on
React
\emph default
 lässt sich das UI (
\emph on
User Interface
\emph default
) in wiederverwendbare und unabhängige Komponenten isolieren.
 Komponenten stellen mit ihren Funktionen und Attributen eine Abstraktion
 von JavaScript-Objekten dar.
 Jede Komponenteninstanz hat ihren Einfluss auf sowohl ihren DOM-Knoten
 als auch auf die Instanzen der Kindeskomponenten.
\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Standard
Dieser Abschnitt erläutert die Implementierung des Dashboards.
\end_layout

\begin_layout Subsection
Dashboard
\end_layout

\begin_layout Standard
In diesem Programmcode wird das Dashboard-Komponente erstellt.
 Sie bindet eine Methode 
\emph on
getResult(), 
\emph default
die eine GET-Anfrage an den URL 
\emph on
/classification 
\emph default
senden soll.
 Anhand dieser Anfrage sollen die Resultate der Klassifikationen vom Server
 geholt werden, um die zu präsentieren.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "caption={Erstellung der Dashboard-Komponente},captionpos=b"
inline false
status open

\begin_layout Plain Layout

class Dashboard extends Component {   
\end_layout

\begin_layout Plain Layout

	constructor(props) {     
\end_layout

\begin_layout Plain Layout

		super(props);     
\end_layout

\begin_layout Plain Layout

		this.getResult = this.getResult.bind(this);     
\end_layout

\begin_layout Plain Layout

		this.state = {       
\end_layout

\begin_layout Plain Layout

			loading: false,     
\end_layout

\begin_layout Plain Layout

		};   
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Anfragen
\end_layout

\begin_layout Standard
Der Zeitpunkt der Inanspruchnahme des Dienstes soll in der Regel dem Benutzer
 gegenüber kontrolliert sein.
 Bei einigen Situationen, wie beispielsweise der Aufruf des Dashboards,
 kann die Anfrage direkt beim Aufruf erfolgen.

\emph on
 React
\emph default
 bietet eine Funktion die es einer Komponente erlaubt Funktionalitäten beim
 Eintritt in den DOM auszuführen.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "caption={Aufruf beim DOM-Eintritt},captionpos=b"
inline false
status open

\begin_layout Plain Layout

componentDidMount() {
\end_layout

\begin_layout Plain Layout

    const API = 'http://localhost:8090/classification';     
\end_layout

\begin_layout Plain Layout

    this.getResult(API)   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Programmcode wird eine Methode aufgerufen, die eine Anfrage mit der Anfrageme
thode 
\emph on
GET 
\emph default
an den Endpunkt 
\emph on
/classification 
\emph default
sendet.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Die Methode
\emph on
 getResult(), 
\emph default
die im Programmcode aufgezeigt wird, fragt über den Webservice 
\emph on
/classification 
\emph default
nach Daten.
 Im sonst asynchronen Programmablauf sind promises die einzige Möglichkeit
 einen synchronen Ablauf von Code durchzuführen.
 Während der Anfrage werden Zustandsattribute der Komponente mit der Methode
 
\emph on
setState()
\emph default
 gesetzt.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

getResult = (API) => {
\end_layout

\begin_layout Plain Layout

    this.setState({
\end_layout

\begin_layout Plain Layout

    	loading: true,
\end_layout

\begin_layout Plain Layout

    });     
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	axios({       
\end_layout

\begin_layout Plain Layout

		method: 'get',       
\end_layout

\begin_layout Plain Layout

		url: API,       
\end_layout

\begin_layout Plain Layout

		config: {         
\end_layout

\begin_layout Plain Layout

			headers: {           
\end_layout

\begin_layout Plain Layout

				'Access-Control-Allow-Origin': '*',
\end_layout

\begin_layout Plain Layout

	            'Content-Type': 'multipart/form-data'
\end_layout

\begin_layout Plain Layout

	        	}       
\end_layout

\begin_layout Plain Layout

			}     
\end_layout

\begin_layout Plain Layout

		})
\end_layout

\begin_layout Plain Layout

        .then((response) => {
\end_layout

\begin_layout Plain Layout

			if (response.data.result) {           
\end_layout

\begin_layout Plain Layout

				this.setState({             
\end_layout

\begin_layout Plain Layout

					accuracies: response.data.result.accuracies,             
\end_layout

\begin_layout Plain Layout

					amount: response.data.result.amount,             
\end_layout

\begin_layout Plain Layout

					predictions: response.data.result.predictions,             
\end_layout

\begin_layout Plain Layout

					correlation: response.data.result.coefs,             
\end_layout

\begin_layout Plain Layout

					errorMean: response.data.result.err_mean_amount,             
\end_layout

\begin_layout Plain Layout

					errorMeanPercentage: response.data.result.err_mean_perc,             
\end_layout

\begin_layout Plain Layout

					errors: response.data.result.sum_errors,             
\end_layout

\begin_layout Plain Layout

					errorsPercentage: response.data.result.error_percentages,            
 
\end_layout

\begin_layout Plain Layout

					avgSavedTime: response.data.result.saved_time_amount,             
\end_layout

\begin_layout Plain Layout

					avgSavedTimePercentage: response.data.result.saved_time_perc,        
     
\end_layout

\begin_layout Plain Layout

					loading: false           
\end_layout

\begin_layout Plain Layout

				});      
\end_layout

\begin_layout Plain Layout

			}         
\end_layout

\begin_layout Plain Layout

			console.log(response);
\end_layout

\begin_layout Plain Layout

        })       
\end_layout

\begin_layout Plain Layout

		.catch(function (response) {
\end_layout

\begin_layout Plain Layout

        	console.log(response);
\end_layout

\begin_layout Plain Layout

	        console.log('error');
\end_layout

\begin_layout Plain Layout

        });   
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Konstruktor der JavaScript-Objekt 
\emph on
Axios
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/axios/axios
\end_layout

\end_inset

, wird die Anfragemethode, die anzusprechende URL und der Header über ein
 JSON definiert.
 Wenn die Anfrage erfolgt ist und der Status Code im Rahmen von 200-399
 ist, wird im Versprechen 
\emph on
.then()
\emph default
 mit der Antwort die Zustandsattribute der Komponente gesetzt.
 Das 
\emph on
.catch()
\emph default
 Versprechen fängt einen Fehlerfall, der sich über ein Status Code der höher
 als 399 ist, definiert und loggt die Antwort in die Browserkonsole, wenn
 die Anfrage nicht erfolgreich war.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Davon ausgehend, dass die anfrage erfolgreich ist, sind die Daten vom Server,
 die präsentiert werden sollen, in der Komponente gespeichert.
 Unter diesen Daten befindet sich unter anderem Auflistungen bezüglich der
 Fehleranzahl, die durchschnittliche Zeitersparnis, die Anzahl an Klassifikation
en und die Zielsicherheit für jede Kategorie.
\end_layout

\begin_layout Subsection
Rendern
\end_layout

\begin_layout Standard
Damit die Daten in eine repräsentativ veranschaulicht im Webbrowser angezeigt
 werden, müssen die Zustandsattribute an inkludierte Graph-Komponenten übergeben
 werden.
 Graphen-Komponenten werden über das Framework 
\emph on
react-chartjs-2
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/jerairrest/react-chartjs-2
\end_layout

\end_inset

 zur Verfügung gestellt und erwarten eine JSON für die Instanziierung der
 Komponenten.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Anhand des Programmcodes wird eine 
\emph on
Doughnut 
\emph default
Komponente anhand von zwei Listen, die zuvor durch die Anfrage als Zustandsattri
bute gesetzt wurden, instanziiert.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<Bar                 
\end_layout

\begin_layout Plain Layout

data={ErrorData(Object.keys(this.state.errorsPercentage),
\end_layout

\begin_layout Plain Layout

                Object.values(this.state.errorsPercentage),
\end_layout

\begin_layout Plain Layout

                'Errors'                 
\end_layout

\begin_layout Plain Layout

)}                 
\end_layout

\begin_layout Plain Layout

options={ErrorOptions}               
\end_layout

\begin_layout Plain Layout

/>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Listen sind jeweils die Schlüssel und die Werte von einem JSON, welches
 die Kategorien und Genauigkeiten 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
endinput
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "./bib/thesis"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
