#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\options bibliography=totoc,listof=totoc,BCOR=5mm,DIV=12
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-1
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine biblatex
\cite_engine_type authoryear
\biblio_style plainnat
\biblio_options backend=biber
\biblatex_bibstyle alphabetic
\biblatex_citestyle alphabetic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
chapter{Entwicklung des Clients}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap_development_client"

\end_inset


\end_layout

\begin_layout Standard
Dieses Kapitel befasst sich mit der Entwicklung des Clients und ist in den
 zwei Kapiteln Architektur und Implementierung gegliedert.
\end_layout

\begin_layout Section
Architekturentwurf
\end_layout

\begin_layout Standard
In Diesen Unterkapitel wird die Architektur des Clients beschrieben und
 visualisiert.
\end_layout

\begin_layout Subsection
Technologien
\end_layout

\begin_layout Standard
Das Dashboard wird als Webapplikation auf Basis von HTML5, CSS und JavaScript
 entwickelt.
 Das Dashboard repräsentiert Daten die vom Server über HTTP-Requests geholt
 werden.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection
Node.js
\end_layout

\begin_layout Standard
Der Webclient läuft als HTTP-Server über Node.js
\begin_inset Foot
status open

\begin_layout Plain Layout
https://nodejs.org
\end_layout

\end_inset

 auf it eine V8 JavaScript Laufzeitmaschine, dem derzeit schnellsten JavaScript-
Compiler.
 Die Verwaltung der gesamten abhängigen Frameworks und Bibliotheken verläuft
 über dem JavaScript-Paketmanager NPM (
\emph on
Node Package Manager
\emph default
), der speziell für Node.js-Applikationen entwickelt wurden ist.
 Die Abhängigkeiten werden zusammen mit Projektinformationen, Konfigurationen
 und Skriptbefehle in einer JSON-Datei mit der Dateibezeichnung 
\emph on
package.json 
\emph default
festgehalten.
 Der Kommandozeilen-Befehle 
\emph on
npm install 
\emph default
installiert alle definierten Abhängigkeiten des Projekts über die Node.js
 Schnittstelle.
 Die installierten Abhängigkeiten werden im festgelegten Ordner 
\emph on
node_modules 
\emph default
akkumuliert.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection
React
\end_layout

\begin_layout Standard
Zusätlich wird die auf Babel basierende Bibliothek React
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://reactjs.org/
\end_layout

\end_inset

 genutzt.
 Durch React lässt sich das UI (
\emph on
User Interface
\emph default
) in wiederverwendbare und unabhängige Komponenten isolieren.
 Komponenten stellen mit ihren Funktionen und Attributen eine Abstaktion
 von JavaScript-Objekten dar.
 Jede Komponenteninstanz hat ihren Einfluss auf sowohl ihren Document Object
 Model Knoten als auch auf die Instanzen der Kindskomponenten.
\end_layout

\begin_layout Subsubsection
Axios
\end_layout

\begin_layout Standard
promise based requests
\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Standard
Dieser Abschnitt erläutert die Implementierung des Dashboards.
\end_layout

\begin_layout Subsection
Lazy loading
\end_layout

\begin_layout Standard
React lazy loading -> Performance
\end_layout

\begin_layout Subsection
Anfragen
\end_layout

\begin_layout Standard
In Diesem Kontext übernehme ich in der SOA die Rolle des Dienstnutzers.
\end_layout

\begin_layout Standard
Der Zeitpunkt der Beanspruchnahme des Dienstes soll dem Benutzer gegenüber
 kontrolliert sein.
 Bei einigen Situationen, wie beispielsweise der Aufruf des Dashboards,
 kann die Anfrage direkt beim Aufruf erfolgen.
 React bietet eine Funktion die es einer Komponente erlaubt Funktionalitäten
 beim Eintritt in den DOM auszuführen.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

componentDidMount() {
\end_layout

\begin_layout Plain Layout

    const API = 'http://localhost:8090/classification';     
\end_layout

\begin_layout Plain Layout

    this.getResult(API)   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Anfrage bei Aufruf des Dashboards
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:mount"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Programmcode 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:mount"
plural "false"
caps "false"
noprefix "false"

\end_inset

 wird eine Methode aufgerufen, die eine Anfrage mit der Anfragemethode 
\emph on
GET 
\emph default
an den Endpunkt 
\emph on
/classification 
\emph default
sendet.
\end_layout

\begin_layout Standard
Die Methode
\emph on
 getResult(), 
\emph default
die im Programmcode 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_classification"
plural "false"
caps "false"
noprefix "false"

\end_inset

 aufgezeigt wird, fragt über den Webservice 
\emph on
/classification 
\emph default
nach Daten.
 Im sonst asynchronen Programmablauf sind promises die einzige Möglichkeit
 einen synchronen ablauf von Code durchzuführen.
 Während der Anfrage werden Zustandsattribute der Komponente mit der Methode
 
\emph on
setState()
\emph default
 gesetzt.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

getResult = (API) => {
\end_layout

\begin_layout Plain Layout

    this.setState({
\end_layout

\begin_layout Plain Layout

    	loading: true,
\end_layout

\begin_layout Plain Layout

    });     
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	axios({       
\end_layout

\begin_layout Plain Layout

		method: 'get',       
\end_layout

\begin_layout Plain Layout

		url: API,       
\end_layout

\begin_layout Plain Layout

		config: {         
\end_layout

\begin_layout Plain Layout

			headers: {           
\end_layout

\begin_layout Plain Layout

				'Access-Control-Allow-Origin': '*',
\end_layout

\begin_layout Plain Layout

	            'Content-Type': 'multipart/form-data'
\end_layout

\begin_layout Plain Layout

	        	}       
\end_layout

\begin_layout Plain Layout

			}     
\end_layout

\begin_layout Plain Layout

		})
\end_layout

\begin_layout Plain Layout

        .then((response) => {
\end_layout

\begin_layout Plain Layout

			if (response.data.result) {           
\end_layout

\begin_layout Plain Layout

				this.setState({             
\end_layout

\begin_layout Plain Layout

					accuracies: response.data.result.accuracies,
\end_layout

\begin_layout Plain Layout

		            amount: response.data.result.amount,             
\end_layout

\begin_layout Plain Layout

					predictions: response.data.result.predictions,
\end_layout

\begin_layout Plain Layout

		            loading: false           
\end_layout

\begin_layout Plain Layout

				});         
\end_layout

\begin_layout Plain Layout

			}         
\end_layout

\begin_layout Plain Layout

			console.log(response);
\end_layout

\begin_layout Plain Layout

        })       
\end_layout

\begin_layout Plain Layout

		.catch(function (response) {
\end_layout

\begin_layout Plain Layout

        	console.log(response);
\end_layout

\begin_layout Plain Layout

	        console.log('error');
\end_layout

\begin_layout Plain Layout

        });   
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GET Request an Klassifikation
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_classification"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Konstruktor der JavaScript Funktion Axios, wird die Anfragemethode, die
 anzusprechende URL und der Header über ein JSON definiert.
 Wenn die Anfrage erfolgt ist und der Status Code im Rahmen von 200-399
 ist, wird im promise 
\emph on
.then()
\emph default
 mit der Antwort die Zustandsattribute der Komponente gesetzt.
 Das 
\emph on
.catch()
\emph default
 promise loggt die Antwort auf die Browserkonsole, wenn die Anfrage nicht
 erfolgreich war.
\end_layout

\begin_layout Subsection
Rendering
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

return (       
\end_layout

\begin_layout Plain Layout

	<div className="animated fadeIn">         
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

   	this.state.loading           
\end_layout

\begin_layout Plain Layout

	   ? <Spinner color="primary" />           
\end_layout

\begin_layout Plain Layout

	   : this.state.predictions           
\end_layout

\begin_layout Plain Layout

	   ?
\end_layout

\begin_layout Plain Layout

        <Row>             
\end_layout

\begin_layout Plain Layout

			<Col>               
\end_layout

\begin_layout Plain Layout

				<div className="animated fadeIn">
\end_layout

\begin_layout Plain Layout

          	  	<Card>             
\end_layout

\begin_layout Plain Layout

						<CardHeader>Total amount of Classifications:<h2>{this.state.amount}</h2>
\end_layout

\begin_layout Plain Layout

						</CardHeader>             
\end_layout

\begin_layout Plain Layout

						<CardBody>               
\end_layout

\begin_layout Plain Layout

							<Doughnut                 
\end_layout

\begin_layout Plain Layout

							data={data(Object.keys(this.state.predictions),                   							Obj
ect.values(this.state.predictions))} 
\end_layout

\begin_layout Plain Layout

							/>             
\end_layout

\begin_layout Plain Layout

						</CardBody>           
\end_layout

\begin_layout Plain Layout

					</Card>               
\end_layout

\begin_layout Plain Layout

				</div>             
\end_layout

\begin_layout Plain Layout

			</Col>             
\end_layout

\begin_layout Plain Layout

			<Col>               
\end_layout

\begin_layout Plain Layout

			<div className="animated fadeIn">                 
\end_layout

\begin_layout Plain Layout

				<Card>             
\end_layout

\begin_layout Plain Layout

				<CardHeader>Accuracy contribution
\end_layout

\begin_layout Plain Layout

				</CardHeader>             
\end_layout

\begin_layout Plain Layout

				<CardBody>               
\end_layout

\begin_layout Plain Layout

					<Bar                 
\end_layout

\begin_layout Plain Layout

					data={data(Object.keys(this.state.accuracies),                   					Object.va
lues(this.state.accuracies))} 
\end_layout

\begin_layout Plain Layout

					/>             
\end_layout

\begin_layout Plain Layout

				</CardBody>           
\end_layout

\begin_layout Plain Layout

				</Card>               
\end_layout

\begin_layout Plain Layout

			</div>
\end_layout

\begin_layout Plain Layout

            </Col>           
\end_layout

\begin_layout Plain Layout

			</Row>           
\end_layout

\begin_layout Plain Layout

			: null         }       </div>     );   }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Rendern der gesetzten Attribute von der Komponente
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
endinput
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "./bib/thesis"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
